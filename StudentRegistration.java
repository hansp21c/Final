Skip to content
This repository
Search
Pull requests
Issues
Gist
 @hansp21c
 Watch 5
  Star 1
  Fork 0 samdmpr/EasyStudentReport
 Code  Issues 0  Pull requests 0  Wiki  Pulse  Graphs
Branch: master Find file Copy pathEasyStudentReport/src/com/java/ESR/Main/ESRGUI.java
6539baa  on Dec 9, 2013
@samdmpr samdmpr Added Default Title and other bug fixes
3 contributors @samdmpr @minh86 @nikhilbhangale
RawBlameHistory     795 lines (700 sloc)  39.2 KB
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.java.ESR.Main;

import com.java.ESR.Support.InExcel;
import com.java.ESR.Support.NoRecordsFoundException;
import com.java.ESR.Support.Roster;
import com.java.ESR.Support.Student;
import com.java.ESR.Support.StudentException;
import com.java.ESR.Support.ePDFManipulation;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.Properties;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Abdul Aziz
 */
public class ESRGUI extends javax.swing.JFrame {

    //To Enable Loggin mechanism
    private final static Logger LOGGER = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);
    private static Properties loggingProperties = new Properties();

    /**
     * Creates new form ESRGUI
     */
    public ESRGUI() {
        initComponents();

        //Initializing the Logger
        try {
            loggingProperties.load(new FileInputStream("Logging.Properties"));
            LOGGER.setLevel(Level.parse(loggingProperties.getProperty("Level")));
            LOGGER.addHandler(new FileHandler("application.log", true));
            if (loggingProperties.getProperty("Level").equalsIgnoreCase("OFF")) {
                this.LoggingButton.setText("Logging is OFF");
                this.LoggingButton.setSelected(false);
            } else {
                this.LoggingButton.setText("Logging is ON");
                this.LoggingButton.setSelected(true);
            }

        } catch (IOException | SecurityException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        steps = new javax.swing.JTabbedPane();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_title = new javax.swing.JTextPane();
        jButton1 = new javax.swing.JButton();
        btt_next = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        LoggingButton = new javax.swing.JToggleButton();
        jInternalFrame2 = new javax.swing.JInternalFrame();
        excel_input = new javax.swing.JTextField();
        excel_browse = new javax.swing.JButton();
        pic_browse = new javax.swing.JButton();
        pic_input = new javax.swing.JTextField();
        output_dir = new javax.swing.JTextField();
        btt_outputDirectory = new javax.swing.JButton();
        btt_exit = new javax.swing.JButton();
        btt_generate = new javax.swing.JButton();
        roster_input = new javax.swing.JTextField();
        roster_browse = new javax.swing.JButton();
        include_roster = new javax.swing.JCheckBox();
        btt_back = new javax.swing.JButton();
        lable1 = new javax.swing.JLabel();
        progress = new javax.swing.JProgressBar();
        lbl_student = new javax.swing.JLabel();
        lable3 = new javax.swing.JLabel();
        allPrograms = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jInternalFrame1.setVisible(true);

        txt_title.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_titleFocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(txt_title);

        jButton1.setText("Exit");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton1MouseReleased(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btt_next.setText("Next");
        btt_next.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btt_nextMouseReleased(evt);
            }
        });
        btt_next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btt_nextActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        jLabel1.setText("Welcome to Easy Student Report");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Please enter the \"TITLE\" of your choice");

        LoggingButton.setText("Turn Logging On/OFF");
        LoggingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoggingButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(btt_next, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jLabel1)))
                .addContainerGap(109, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(LoggingButton)
                .addGap(38, 38, 38))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(212, 212, 212))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap(83, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(15, 15, 15)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btt_next, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(LoggingButton)
                .addGap(21, 21, 21))
        );

        jInternalFrame1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btt_next, jButton1});

        steps.addTab("Step 1", jInternalFrame1);

        jInternalFrame2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jInternalFrame2.setVisible(true);

        excel_input.setText("Select input excel file");
        excel_input.setName(""); // NOI18N

        excel_browse.setText("Choose");
        excel_browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excel_browseActionPerformed(evt);
            }
        });

        pic_browse.setText("Choose");
        pic_browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pic_browseActionPerformed(evt);
            }
        });

        pic_input.setText("Input pictures directory");

        output_dir.setText("Output directory");

        btt_outputDirectory.setText("Choose");
        btt_outputDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btt_outputDirectoryActionPerformed(evt);
            }
        });

        btt_exit.setText("Exit");
        btt_exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btt_exitMouseReleased(evt);
            }
        });

        btt_generate.setText("Generate");
        btt_generate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btt_generateActionPerformed(evt);
            }
        });

        roster_input.setText("Select input roster file");
        roster_input.setEnabled(false);

        roster_browse.setText("Choose");
        roster_browse.setEnabled(false);
        roster_browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roster_browseActionPerformed(evt);
            }
        });

        include_roster.setText("Include Roster file");
        include_roster.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                include_rosterActionPerformed(evt);
            }
        });

        btt_back.setText("Back");
        btt_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btt_backActionPerformed(evt);
            }
        });

        lable1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lable1.setText("Input files");
        lable1.setToolTipText("");

        lable3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lable3.setText("Output files");
        lable3.setToolTipText("");

        allPrograms.setText("Generate PDFs for different programs");
        allPrograms.setActionCommand("allPrograms");

        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("*");

        jLabel4.setForeground(new java.awt.Color(255, 0, 0));
        jLabel4.setText("*");

        jLabel5.setForeground(new java.awt.Color(255, 0, 0));
        jLabel5.setText("*");

        javax.swing.GroupLayout jInternalFrame2Layout = new javax.swing.GroupLayout(jInternalFrame2.getContentPane());
        jInternalFrame2.getContentPane().setLayout(jInternalFrame2Layout);
        jInternalFrame2Layout.setHorizontalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame2Layout.createSequentialGroup()
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jInternalFrame2Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(lable1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jInternalFrame2Layout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jInternalFrame2Layout.createSequentialGroup()
                                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jInternalFrame2Layout.createSequentialGroup()
                                        .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(excel_input, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(pic_input, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(include_roster)
                                                .addComponent(roster_input, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4)))
                                    .addGroup(jInternalFrame2Layout.createSequentialGroup()
                                        .addComponent(output_dir, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel5)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(excel_browse)
                                        .addComponent(roster_browse)
                                        .addComponent(pic_browse))
                                    .addComponent(btt_outputDirectory, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(jInternalFrame2Layout.createSequentialGroup()
                                .addGap(83, 83, 83)
                                .addComponent(progress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jInternalFrame2Layout.createSequentialGroup()
                                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jInternalFrame2Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(btt_back, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(51, 51, 51)
                                        .addComponent(btt_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(45, 45, 45)
                                        .addComponent(btt_generate, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lbl_student, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 23, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(allPrograms)
                                .addGap(101, 101, 101)))))
                .addGap(80, 80, 80))
            .addGroup(jInternalFrame2Layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(lable3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jInternalFrame2Layout.setVerticalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lable1)
                .addGap(16, 16, 16)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(excel_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(excel_browse)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roster_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roster_browse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(include_roster)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(pic_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addComponent(pic_browse))
                .addGap(18, 18, 18)
                .addComponent(lable3)
                .addGap(4, 4, 4)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(output_dir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btt_outputDirectory)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(allPrograms)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_student, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btt_generate, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btt_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btt_back, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33))
        );

        excel_input.getAccessibleContext().setAccessibleName("");

        steps.addTab("Step 2", jInternalFrame2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(steps, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(steps, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
        );

        steps.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseReleased
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton1MouseReleased

    private void btt_nextMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btt_nextMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_btt_nextMouseReleased

    private void btt_exitMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btt_exitMouseReleased
        // TODO add your handling code here:
        LOGGER.log(Level.INFO, "Application Shutting Down ...");
        System.exit(0);
    }//GEN-LAST:event_btt_exitMouseReleased

    private void include_rosterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_include_rosterActionPerformed
        // TODO add your handling code here:
        if (include_roster.isSelected()) {
            roster_browse.setEnabled(true);
            roster_input.setEnabled(true);
            LOGGER.log(Level.INFO, "Roster Box is Checked");
        } else {

            roster_browse.setEnabled(false);
            roster_input.setEnabled(false);
            LOGGER.log(Level.INFO, "Roster Box is Unchecked");
        }
    }//GEN-LAST:event_include_rosterActionPerformed

    private void btt_nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btt_nextActionPerformed
        // TODO add your handling code here:
        if (txt_title.getText().equals("Please insert the title of the list...") || txt_title.getText().isEmpty()) {
            if (JOptionPane.showConfirmDialog(null, "The pdf file will have no title. Are you sure?", "No title", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                steps.setSelectedIndex(1);
            }
            LOGGER.log(Level.WARNING, "Title Box is blank");
        } else {
            steps.setSelectedIndex(1);
        }
    }//GEN-LAST:event_btt_nextActionPerformed

    private void excel_browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excel_browseActionPerformed

        JFileChooser jc = new JFileChooser();

        jc.setFileFilter(new FileNameExtensionFilter("Excel Files", "xls", "xlsx"));
        int ret = jc.showOpenDialog(null);
        if (ret == JFileChooser.APPROVE_OPTION) {
            File f = jc.getSelectedFile();
            excel_input.setText(f.getPath());
            LOGGER.log(Level.INFO, "Excel path is fetched");
        }
    }//GEN-LAST:event_excel_browseActionPerformed

    private void roster_browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roster_browseActionPerformed

        JFileChooser jc = new JFileChooser();
        jc.setFileFilter(new FileNameExtensionFilter("Text Files", "txt"));
        int ret = jc.showOpenDialog(jc);
        if (ret == JFileChooser.APPROVE_OPTION) {
            File f = jc.getSelectedFile();
            roster_input.setText(f.getPath());
            LOGGER.log(Level.INFO, "Roster path is fetched");
        }
    }//GEN-LAST:event_roster_browseActionPerformed

    private void pic_browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pic_browseActionPerformed

        JFileChooser jc = new JFileChooser();
        jc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int ret = jc.showOpenDialog(jc);
        if (ret == JFileChooser.APPROVE_OPTION) {
            File f = jc.getSelectedFile();
            pic_input.setText(f.getPath());
            LOGGER.log(Level.INFO, "Image Folder is Selected");
        }
    }//GEN-LAST:event_pic_browseActionPerformed

    private void btt_outputDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btt_outputDirectoryActionPerformed

        JFileChooser jc = new JFileChooser();
        jc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int ret = jc.showOpenDialog(jc);
        if (ret == JFileChooser.APPROVE_OPTION) {
            File f = jc.getSelectedFile();
            output_dir.setText(f.getPath());
            LOGGER.log(Level.INFO, "Output path is selected");
        }
    }//GEN-LAST:event_btt_outputDirectoryActionPerformed

    private void btt_generateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btt_generateActionPerformed
        // TODO add your handling code here:
        if (this.preCheck()) {
            LOGGER.log(Level.INFO, "File Processing Starts");

            this.lbl_student.setVisible(true);
            this.progress.setVisible(true);
            LOGGER.log(Level.INFO, "Before Excel constrcutor");
            InExcel in;
            in = new InExcel();
            LOGGER.log(Level.INFO, "After Excel constructor");
            in.setExName(excel_input.getText());
            in.setImgPath(pic_input.getText());
            LOGGER.log(Level.INFO, "Excel is set");
            try {
                in.readInput(this.progress, this.lbl_student);
                LOGGER.log(Level.INFO, "Excel is Loaded");
                if (include_roster.isSelected()) {
                    Roster roster = new Roster();
                    roster.readRoster(roster_input.getText());
                    roster.processRoster();
                    LOGGER.log(Level.INFO, "Roster is Loaded");
                }

                Iterator<Student> it = Student.sList.iterator();
                while (it.hasNext()) {
                    Student s = (Student) it.next();
                    System.out.println(s);
                }

                Collections.sort(Student.sList);

                int total = Student.sList.size(), current = 0;

                ePDFManipulation.addName = "_ALL";
                LOGGER.log(Level.INFO, "Sending to PDF Generator");
                if(Student.sList.isEmpty())
                {
                    throw new NoRecordsFoundException("No Records Found or Records in Roster file does not match with the andrew id in excel file");
                }
                ePDFManipulation.CreateStudentPDF(Student.sList, txt_title.getText(), this.progress, this.lbl_student, this.output_dir.getText());

                if (allPrograms.isSelected()) {
                    forPrograms();
                } else {
                    showConfirmationDialogueAndErrors();
                }

            } 
            catch (NoRecordsFoundException e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), "Confirmation", JOptionPane.INFORMATION_MESSAGE);
                this.progress.setValue(0);
                this.lbl_student.setText("");
                LOGGER.log(Level.SEVERE, "No Records Found", e);
            }
            catch (StudentException e) {
                LOGGER.log(Level.SEVERE, "Unknown Student Exception", e);
                JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } catch (NullPointerException e) {
                LOGGER.log(Level.SEVERE, "Unknown NullPointer Exception", e);
                JOptionPane.showMessageDialog(null, "Please check the Excel files for blank values", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                LOGGER.log(Level.SEVERE, "Unknown Exception", e);
                JOptionPane.showMessageDialog(null, "An Error Occured. Please refer to the log files for more Information", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            LOGGER.log(Level.INFO, "Required Fields are Missing");
            JOptionPane.showMessageDialog(null, "Required Input fields are Missing. Try again after entering values in those fields.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btt_generateActionPerformed

    public void showConfirmationDialogueAndErrors() {
        try {
            if (Student.imageError.toString().contains("Message") || Roster.roosterErr.toString().contains("Message")) {
                JOptionPane.showMessageDialog(null, "The PDF is generated successfully with some errors", "PDF Generation", JOptionPane.INFORMATION_MESSAGE);
                this.progress.setValue(0);
                this.lbl_student.setText("");
            } else {
                JOptionPane.showMessageDialog(null, "The PDF is generated successfully", "PDF Generation", JOptionPane.INFORMATION_MESSAGE);
                this.progress.setValue(0);
                this.lbl_student.setText("");
            }

            showPicErrors();

            if (include_roster.isSelected()) {
                showRoostererr();

            }
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "Error While Generating the Error Details", e);
        }
    }

    private Boolean preCheck() {
        Student.imageError=new StringBuilder();
        Roster.roosterErr=new StringBuilder();
        if (this.include_roster.isSelected() == true) {
            if (this.validatePath(this.excel_input.getText(), false) && this.validatePath(this.pic_input.getText(), true) && this.validatePath(this.output_dir.getText(), true) && this.validatePath(this.roster_input.getText(), false)) {
                return true;
            }
        } else {
            if (this.validatePath(this.excel_input.getText(), false) && this.validatePath(this.pic_input.getText(), true) && this.validatePath(this.output_dir.getText(), true)) {
                return true;
            }
        }
        return false;
    }

    private Boolean validatePath(String Path, Boolean isDirectory) {
        if (!Path.isEmpty()) {
            if (isDirectory) {
                System.out.println(Files.isDirectory(Paths.get(Path), LinkOption.values()));
                return Files.isDirectory(Paths.get(Path), LinkOption.values());
            } else {
                System.out.println(Files.exists(Paths.get(Path), LinkOption.values()));
                System.out.println(Files.isReadable(Paths.get(Path)));
                if (Files.exists(Paths.get(Path), LinkOption.values()) && Files.isReadable(Paths.get(Path))) {
                    return true;
                }
            }
        }
        return false;
    }

    private void showPicErrors() {

        Student.imageError.append("\n");
        Student.imageError.append("Image files are either not available in directory or wrong file extension");
        Student.imageError.append("\n");
        Student.imageError.append("\n");
        Student.imageError.append("PDF generated with remaing details. Thank you!");
        String picErrors = Student.imageError.toString();
        if (picErrors.contains("Message")) {
            JOptionPane.showMessageDialog(null, picErrors, "MESSAGE", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void showRoostererr() {

        Roster.roosterErr.append("\n");
        Roster.roosterErr.append("\n");
        Roster.roosterErr.append("PDF generated with remaing student details. Thank you!");
        String rooErrors = Roster.roosterErr.toString();
        if (rooErrors.contains("Message")) {
            JOptionPane.showMessageDialog(null, rooErrors, "MESSAGE", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void forPrograms() {
        ArrayList<Student> temp = new ArrayList<>();
        try {
            for (String s : Student.pList) {
                String sTest = s.replace("\\s", "");
                System.out.println(sTest + ":Checking");
                if (!sTest.equals("")) {
                    for (Student k : Student.sList) {
                        if (k.getProgramTrack().equals(s)) {
                            temp.add(k);
                        }

                    }
                    ePDFManipulation.addName = "_" + s;
                    if (temp.size() > 0) {
                        ePDFManipulation.CreateStudentPDF(temp, txt_title.getText(), this.progress, this.lbl_student, this.output_dir.getText());
                    }

                    temp = new ArrayList<>();
                }
            }
            showConfirmationDialogueAndErrors();
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "Unknown Exception", e);
            JOptionPane.showMessageDialog(null, "An Error Occured. Please refer to the log files for more Information", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void txt_titleFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_titleFocusGained

        if (txt_title.getText().equals("Please insert the title of the list...")) {
            txt_title.setText("");
        }
    }//GEN-LAST:event_txt_titleFocusGained

    private void btt_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btt_backActionPerformed

        steps.setSelectedIndex(0);
    }//GEN-LAST:event_btt_backActionPerformed

    private void LoggingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoggingButtonActionPerformed

        try (FileOutputStream fs = new FileOutputStream("Logging.Properties");) {
            if (this.LoggingButton.isSelected()) {
                this.LoggingButton.setText("Logging is ON");
                loggingProperties.setProperty("Level", "ALL");
                LOGGER.setLevel(Level.parse(loggingProperties.getProperty("Level")));
            } else {
                this.LoggingButton.setText("Logging is OFF");
                loggingProperties.setProperty("Level", "OFF");
                LOGGER.setLevel(Level.parse(loggingProperties.getProperty("Level")));
            }

            loggingProperties.store(fs, null);
        } catch (IllegalArgumentException | SecurityException | IOException e) {
            LOGGER.log(Level.SEVERE, "Exception while writing to the logger properties file", e);
        }
    }//GEN-LAST:event_LoggingButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            Thread.currentThread().sleep(1000L);
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            LOGGER.log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(ESRGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                ESRGUI main_form = new ESRGUI();
                main_form.setLocationRelativeTo(null);
                main_form.setVisible(true);

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton LoggingButton;
    private javax.swing.JCheckBox allPrograms;
    private javax.swing.JButton btt_back;
    private javax.swing.JButton btt_exit;
    private javax.swing.JButton btt_generate;
    private javax.swing.JButton btt_next;
    private javax.swing.JButton btt_outputDirectory;
    private javax.swing.JButton excel_browse;
    private javax.swing.JTextField excel_input;
    private javax.swing.JCheckBox include_roster;
    private javax.swing.JButton jButton1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JInternalFrame jInternalFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lable1;
    private javax.swing.JLabel lable3;
    private javax.swing.JLabel lbl_student;
    private javax.swing.JTextField output_dir;
    private javax.swing.JButton pic_browse;
    private javax.swing.JTextField pic_input;
    private javax.swing.JProgressBar progress;
    private javax.swing.JButton roster_browse;
    private javax.swing.JTextField roster_input;
    private javax.swing.JTabbedPane steps;
    private javax.swing.JTextPane txt_title;
    // End of variables declaration//GEN-END:variables
}
Status API Training Shop Blog About
© 2016 GitHub, Inc. Terms Privacy Security Contact Help
